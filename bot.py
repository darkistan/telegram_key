#!/usr/bin/env python3
"""
–í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –±–æ—Ç–∞ –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
"""
import os
import logging
from typing import Optional
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

from auth import auth_manager
from keepass_handler import init_keepass_handler, get_keepass_handler
from pagination import pagination_manager
from logger import logger
from rate_limiter import RateLimiter
from csrf_manager import csrf_manager
from input_validator import input_validator

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv("config.env")

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "0"))
ACCESS_PIN = os.getenv("ACCESS_PIN", "1234")
KEEPASS_DB_PATH = os.getenv("KEEPASS_DB_PATH", "database.kdbx")
KEEPASS_PASSWORD = os.getenv("KEEPASS_PASSWORD")
KEEPASS_KEY_FILE = os.getenv("KEEPASS_KEY_FILE")

# Email 2FA –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
ADMIN_EMAIL = os.getenv("ADMIN_EMAIL")
SMTP_SERVER = os.getenv("SMTP_SERVER")
SMTP_PORT = int(os.getenv("SMTP_PORT", "587"))
SMTP_USERNAME = os.getenv("SMTP_USERNAME")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

# KeePass –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
KEEPASS_RECONNECT_INTERVAL = int(os.getenv("KEEPASS_RECONNECT_INTERVAL", "300"))  # 5 —Ö–≤–∏–ª–∏–Ω –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

# Rate Limiting –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
MAX_PIN_ATTEMPTS = int(os.getenv("MAX_PIN_ATTEMPTS", "5"))
MAX_2FA_ATTEMPTS = int(os.getenv("MAX_2FA_ATTEMPTS", "3"))
MAX_REQUESTS_PER_MINUTE = int(os.getenv("MAX_REQUESTS_PER_MINUTE", "10"))
PIN_LOCKOUT_DURATION = int(os.getenv("PIN_LOCKOUT_DURATION", "300"))
TWOFA_LOCKOUT_DURATION = int(os.getenv("2FA_LOCKOUT_DURATION", "180"))

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É
search_results = {}
current_page = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä rate limiter (—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –≤ main())
rate_limiter = None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user = update.effective_user
    user_id = user.id
    
    if auth_manager.is_user_allowed(user_id):
        # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        keyboard = create_menu_keyboard(user_id)
        
        if user_id == ADMIN_USER_ID:
            message_text = "üëë –í–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
        else:
            message_text = "‚úÖ –í–∏ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞"
        
        await update.message.reply_text(message_text, reply_markup=keyboard, parse_mode='Markdown')
    else:
        # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        keyboard = create_menu_keyboard(user_id)
        message_text = "üîê –î–ª—è –¥–æ—Å—Ç—É–ø—É –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è"
        
        await update.message.reply_text(message_text, reply_markup=keyboard, parse_mode='Markdown')


async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /search"""
    user_id = update.effective_user.id
    
    if not auth_manager.is_user_allowed(user_id):
        logger.log_unauthorized_access_attempt(user_id, "/search")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç–∞.")
        return
    
    keepass = get_keepass_handler()
    
    if not keepass or not keepass.is_connected():
        await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö KeePass –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    # –ó–∞–ø–∏—Ç—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É
    await update.message.reply_text(
        "üîç **–ü–æ—à—É–∫ —É –±–∞–∑—ñ KeePass**\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞ –∑–∞–ø–∏—Å—É\n"
        "‚Ä¢ –õ–æ–≥—ñ–Ω\n"
        "‚Ä¢ URL\n"
        "‚Ä¢ –ë—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç –∑ –∑–∞–ø–∏—Å—É\n\n"
        "–ü–æ—à—É–∫ –Ω–µ—á—É—Ç–ª–∏–≤–∏–π –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É."
    )
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    context.user_data['waiting_for_search'] = True


async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /list"""
    user_id = update.effective_user.id
    
    if not auth_manager.is_user_allowed(user_id):
        logger.log_unauthorized_access_attempt(user_id, "/list")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç–∞.")
        return
    
    keepass = get_keepass_handler()
    
    if not keepass or not keepass.is_connected():
        await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö KeePass –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏
        all_entries = keepass.get_all_entries()
        
        if not all_entries:
            await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è.")
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        search_results[user_id] = all_entries
        current_page[user_id] = 0
        
        if len(all_entries) <= 10:
            # –Ø–∫—â–æ –∑–∞–ø–∏—Å—ñ–≤ –º–∞–ª–æ, –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ
            keyboard = pagination_manager.create_search_results_keyboard(all_entries, 0, user_id)
            message_text = f"üìã **–í—Å—ñ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—ñ**\n\n–ó–Ω–∞–π–¥–µ–Ω–æ: {len(all_entries)} –∑–∞–ø–∏—Å—ñ–≤"
            await update.message.reply_text(message_text, reply_markup=keyboard, parse_mode='Markdown')
        else:
            # –Ø–∫—â–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Å—ñ–≤, –ø–æ–∫–∞–∑—É—î–º–æ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
            keyboard = pagination_manager.create_search_results_keyboard(all_entries, 0, user_id)
            page_info = pagination_manager.get_page_info(all_entries, 0)
            message_text = f"üìã **–í—Å—ñ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—ñ**\n\n{page_info}"
            await update.message.reply_text(message_text, reply_markup=keyboard, parse_mode='Markdown')
    
    except Exception as e:
        logger.log_error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å—ñ–≤: {e}", user_id)
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å—ñ–≤.")


async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /admin"""
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id != ADMIN_USER_ID:
        logger.log_unauthorized_access_attempt(user_id, "/admin")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –õ–æ–≥—É—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ
    logger.log_admin_panel_access(user_id)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    users = auth_manager.get_allowed_users()
    
    if not users:
        await update.message.reply_text("üìã **–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è.")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
    keyboard = auth_manager.create_users_management_keyboard(users, 0, 10, ADMIN_USER_ID)
    
    message_text = f"üìã **–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ –¥–æ—Å—Ç—É–ø–æ–º: {len(users)}\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:"
    
    await update.message.reply_text(message_text, reply_markup=keyboard, parse_mode='Markdown')


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–ø—ñ–Ω-–∫–æ–¥, email –∫–æ–¥ —Ç–∞ –ø–æ—à—É–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∏)"""
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    user = update.effective_user
    username = user.username or "–±–µ–∑ username"
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–æ–≤–∂–∏–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message_validation = input_validator.validate_message_length(message_text)
    if not message_validation["valid"]:
        await update.message.reply_text(f"‚ùå {message_validation['message']}")
        return
    
    # Rate limiting –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    request_limit = rate_limiter.check_request_rate_limit(user_id)
    if not request_limit["allowed"]:
        attempts = MAX_REQUESTS_PER_MINUTE - request_limit.get("remaining_requests", 0)
        logger.log_rate_limit_exceeded(user_id, "–∑–∞–≥–∞–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏", attempts, MAX_REQUESTS_PER_MINUTE)
        await update.message.reply_text(f"‚è∞ {request_limit['message']}")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—á—ñ–∫—É—î–º–æ –ø—ñ–Ω-–∫–æ–¥ –≤—ñ–¥ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if context.user_data.get('waiting_for_pin', False):
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—ñ–Ω-–∫–æ–¥—É
        pin_validation = input_validator.validate_pin_code(message_text)
        if not pin_validation["valid"]:
            await update.message.reply_text(f"‚ùå {pin_validation['message']}")
            return
        
        # Rate limiting –¥–ª—è –ø—ñ–Ω-–∫–æ–¥—É
        pin_limit = rate_limiter.check_pin_rate_limit(user_id)
        if not pin_limit["allowed"]:
            attempts = MAX_PIN_ATTEMPTS - pin_limit.get("remaining_attempts", 0)
            logger.log_rate_limit_exceeded(user_id, "–ø—ñ–Ω-–∫–æ–¥", attempts, MAX_PIN_ATTEMPTS)
            await update.message.reply_text(f"‚è∞ {pin_limit['message']}")
            return
        
        if message_text == ACCESS_PIN:
            # –ü—ñ–Ω-–∫–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π, —Å–∫–∏–¥–∞—î–º–æ rate limiting —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ 2FA –∫–æ–¥
            rate_limiter.reset_pin_attempts(user_id)
            context.user_data['waiting_for_pin'] = False
            context.user_data['waiting_for_email_code'] = True
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å email –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            if not all([ADMIN_EMAIL, SMTP_SERVER, SMTP_USERNAME, SMTP_PASSWORD]):
                await update.message.reply_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó email. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
                return
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ 2FA –∫–æ–¥
            code = auth_manager.send_2fa_code(
                user_id, username, ADMIN_EMAIL,
                SMTP_SERVER, SMTP_PORT, SMTP_USERNAME, SMTP_PASSWORD
            )
            
            if code:
                await update.message.reply_text(
                    f"‚úÖ –ü—ñ–Ω-–∫–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π!\n\n"
                    f"üìß –ö–æ–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ email –∞–¥–º—ñ–Ω–∞, –æ—Ç—Ä–∏–º–∞–π—Ç–µ –π–æ–≥–æ —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å.\n\n"
                    f"–ö–æ–¥ –¥—ñ–π—Å–Ω–∏–π –ø—Ä–æ—Ç—è–≥–æ–º 60 —Ö–≤–∏–ª–∏–Ω."
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
                context.user_data['waiting_for_pin'] = True
                context.user_data['waiting_for_email_code'] = False
        else:
            attempts = MAX_PIN_ATTEMPTS - pin_limit.get("remaining_attempts", 0)
            logger.log_invalid_pin(user_id, attempts, MAX_PIN_ATTEMPTS)
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø—ñ–Ω-–∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—á—ñ–∫—É—î–º–æ email –∫–æ–¥ –≤—ñ–¥ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if context.user_data.get('waiting_for_email_code', False):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        if message_text.lower() == 'resend':
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ–¥—É
            code = auth_manager.resend_2fa_code(
                user_id, username, ADMIN_EMAIL,
                SMTP_SERVER, SMTP_PORT, SMTP_USERNAME, SMTP_PASSWORD
            )
            
            if code:
                await update.message.reply_text(
                    f"üìß –ö–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ email –∞–¥–º—ñ–Ω–∞.\n\n"
                    f"–ö–æ–¥ –¥—ñ–π—Å–Ω–∏–π –ø—Ä–æ—Ç—è–≥–æ–º 60 —Ö–≤–∏–ª–∏–Ω."
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
            return
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è 2FA –∫–æ–¥—É
        twofa_validation = input_validator.validate_twofa_code(message_text)
        if not twofa_validation["valid"]:
            await update.message.reply_text(f"‚ùå {twofa_validation['message']}")
            return
        
        # Rate limiting –¥–ª—è 2FA –∫–æ–¥—É
        twofa_limit = rate_limiter.check_twofa_rate_limit(user_id)
        if not twofa_limit["allowed"]:
            attempts = MAX_2FA_ATTEMPTS - twofa_limit.get("remaining_attempts", 0)
            logger.log_rate_limit_exceeded(user_id, "2FA –∫–æ–¥", attempts, MAX_2FA_ATTEMPTS)
            await update.message.reply_text(f"‚è∞ {twofa_limit['message']}")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ 2FA –∫–æ–¥
        result = auth_manager.verify_2fa_code(user_id, message_text)
        
        if result["success"]:
            # –ö–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∞–¥–º—ñ–Ω—É
            context.user_data['waiting_for_email_code'] = False
            await update.message.reply_text("‚úÖ –ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –ó–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await auth_manager.send_access_request_to_admin(update, context, ADMIN_USER_ID)
        else:
            attempts = MAX_2FA_ATTEMPTS - twofa_limit.get("remaining_attempts", 0)
            logger.log_invalid_2fa(user_id, attempts, MAX_2FA_ATTEMPTS)
            if result["can_retry"]:
                await update.message.reply_text(
                    f"‚ùå {result['message']}\n\n"
                    f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å 'resend' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–¥—É."
                )
            else:
                await update.message.reply_text(
                    f"‚ùå {result['message']}\n\n"
                    f"–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /start"
                )
                context.user_data['waiting_for_email_code'] = False
        return
    
    if not auth_manager.is_user_allowed(user_id):
        logger.log_unauthorized_access_attempt(user_id, "—Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç–∞.")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—á—ñ–∫—É—î–º–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if context.user_data.get('waiting_for_search', False):
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É
        query_validation = input_validator.validate_search_query(message_text)
        if not query_validation["valid"]:
            await update.message.reply_text(f"‚ùå {query_validation['message']}")
            return
        
        # –û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É
        await process_search_query(update, context, query_validation["cleaned_query"])
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—á—ñ–∫—É—î–º–æ –∑–∞–ø–∏—Ç –≥—Ä—É–ø–∏ –≤—ñ–¥ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if context.user_data.get('waiting_for_group', False):
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞–∑–≤–∏ –≥—Ä—É–ø–∏
        group_validation = input_validator.validate_group_name(message_text)
        if not group_validation["valid"]:
            await update.message.reply_text(f"‚ùå {group_validation['message']}")
            return
        
        # –û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫—É –∑–∞ –≥—Ä—É–ø–æ—é
        await process_group_query(update, context, group_validation["cleaned_group_name"])
        return
    
    # –Ø–∫—â–æ –Ω–µ –æ—á—ñ–∫—É—î–º–æ –∂–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥—É
    await update.message.reply_text(
        "‚ùì –ù–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/search - –ø–æ—à—É–∫ —É –±–∞–∑—ñ KeePass\n"
        "/group - –ø–æ—à—É–∫ –∑–∞ –≥—Ä—É–ø–æ—é\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏\n"
        "/help - –¥–æ–≤—ñ–¥–∫–∞"
    )


async def process_search_query(update: Update, context: ContextTypes.DEFAULT_TYPE, query: str) -> None:
    """–û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É"""
    user_id = update.effective_user.id
    
    if not query:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É.")
        return
    
    keepass = get_keepass_handler()
    
    if not keepass or not keepass.is_connected():
        await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö KeePass –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    try:
        results = keepass.search_entries(query)
        logger.log_search(user_id, query, len(results))
        
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        context.user_data['waiting_for_search'] = False
        
        if not results:
            await update.message.reply_text("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        search_results[user_id] = results
        current_page[user_id] = 0
        
        if len(results) <= 10:
            # –Ø–∫—â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –º–∞–ª–æ, –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ
            keyboard = pagination_manager.create_search_results_keyboard(results, 0, user_id)
            message_text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è \"{query}\"**\n\n–ó–Ω–∞–π–¥–µ–Ω–æ: {len(results)} –∑–∞–ø–∏—Å—ñ–≤"
            await update.message.reply_text(message_text, reply_markup=keyboard, parse_mode='Markdown')
        else:
            # –Ø–∫—â–æ –±–∞–≥–∞—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤, –ø–æ–∫–∞–∑—É—î–º–æ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
            keyboard = pagination_manager.create_search_results_keyboard(results, 0, user_id)
            page_info = pagination_manager.get_page_info(results, 0)
            message_text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è \"{query}\"**\n\n{page_info}"
            await update.message.reply_text(message_text, reply_markup=keyboard, parse_mode='Markdown')
    
    except Exception as e:
        logger.log_error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {e}", user_id)
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")


async def process_group_query(update: Update, context: ContextTypes.DEFAULT_TYPE, group_query: str) -> None:
    """–û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫—É –∑–∞ –≥—Ä—É–ø–æ—é"""
    user_id = update.effective_user.id
    
    if not group_query:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏ –¥–ª—è –ø–æ—à—É–∫—É.")
        return
    
    keepass = get_keepass_handler()
    
    if not keepass or not keepass.is_connected():
        await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö KeePass –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    try:
        results = keepass.search_entries_by_group(group_query)
        logger.log_search(user_id, f"–≥—Ä—É–ø–∞: {group_query}", len(results))
        
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        context.user_data['waiting_for_group'] = False
        
        if not results:
            await update.message.reply_text(f"‚ùå –í –≥—Ä—É–ø—ñ '{group_query}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤.")
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        search_results[user_id] = results
        current_page[user_id] = 0
        
        if len(results) <= 10:
            # –Ø–∫—â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –º–∞–ª–æ, –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ
            keyboard = pagination_manager.create_search_results_keyboard(results, 0, user_id)
            message_text = f"üìÅ **–ó–∞–ø–∏—Å–∏ –≤ –≥—Ä—É–ø—ñ '{group_query}'**\n\n–ó–Ω–∞–π–¥–µ–Ω–æ: {len(results)} –∑–∞–ø–∏—Å—ñ–≤"
            await update.message.reply_text(message_text, reply_markup=keyboard, parse_mode='Markdown')
        else:
            # –Ø–∫—â–æ –±–∞–≥–∞—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤, –ø–æ–∫–∞–∑—É—î–º–æ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
            keyboard = pagination_manager.create_search_results_keyboard(results, 0, user_id)
            page_info = pagination_manager.get_page_info(results, 0)
            message_text = f"üìÅ **–ó–∞–ø–∏—Å–∏ –≤ –≥—Ä—É–ø—ñ '{group_query}'**\n\n{page_info}"
            await update.message.reply_text(message_text, reply_markup=keyboard, parse_mode='Markdown')
    
    except Exception as e:
        logger.log_error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∑–∞ –≥—Ä—É–ø–æ—é: {e}", user_id)
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")


async def group_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ—à—É–∫—É –∑–∞ –≥—Ä—É–ø–æ—é"""
    user_id = update.effective_user.id
    
    if not auth_manager.is_user_allowed(user_id):
        logger.log_unauthorized_access_attempt(user_id, "/group")
        await update.message.reply_text(
            f"üîê **–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ**\n\n"
            f"–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –≤–≤–µ–¥—ñ—Ç—å –ø—ñ–Ω-–∫–æ–¥: `{ACCESS_PIN}`\n\n"
            f"–ü—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø—ñ–Ω-–∫–æ–¥—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–æ–∑–≥–ª—è–Ω–µ –≤–∞—à –∑–∞–ø–∏—Ç.",
            parse_mode='Markdown'
        )
        context.user_data['waiting_for_pin'] = True
        return
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –≥—Ä—É–ø–∏
    context.user_data['waiting_for_group'] = True
    context.user_data['waiting_for_search'] = False
    context.user_data['waiting_for_pin'] = False
    
    await update.message.reply_text(
        "üîç **–ü–æ—à—É–∫ –∑–∞ –≥—Ä—É–ø–æ—é**\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏ –¥–ª—è –ø–æ—à—É–∫—É –∑–∞–ø–∏—Å—ñ–≤.\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `Email`, `AD HTZ`, `DZTM`",
        parse_mode='Markdown'
    )


async def reconnect_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    user_id = update.effective_user.id
    
    if not auth_manager.is_user_allowed(user_id):
        logger.log_unauthorized_access_attempt(user_id, "/reconnect")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç–∞.")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É.")
        return
    
    keepass = get_keepass_handler()
    if not keepass:
        await update.message.reply_text("‚ùå KeePass –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π.")
        return
    
    try:
        if keepass.force_reconnect():
            await update.message.reply_text("‚úÖ –ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            logger.log_info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –≤–∏–∫–æ–Ω–∞–≤ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
    except Exception as e:
        logger.log_error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}", user_id)
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")


async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏"""
    user_id = update.effective_user.id
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    keyboard = create_menu_keyboard(user_id)
    
    if auth_manager.is_user_allowed(user_id):
        # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        if user_id == ADMIN_USER_ID:
            # –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
            message_text = "üëë –í–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
        else:
            # –ó–≤–∏—á–∞–π–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            message_text = "‚úÖ –í–∏ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞"
    else:
        # –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        message_text = "üîê –î–ª—è –¥–æ—Å—Ç—É–ø—É –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è"
    
    await update.message.reply_text(message_text, reply_markup=keyboard, parse_mode='Markdown')


def create_menu_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –º–µ–Ω—é –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    keyboard = []
    
    if auth_manager.is_user_allowed(user_id):
        # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        if user_id == ADMIN_USER_ID:
            # –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä - –≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏
            keyboard.extend([
                [InlineKeyboardButton("üîç –ü–æ—à—É–∫", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_search"))],
                [InlineKeyboardButton("üìÅ –ì—Ä—É–ø–∞", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_group"))],
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_list"))],
                [InlineKeyboardButton("‚öôÔ∏è –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_admin"))],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_reconnect"))],
                [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_help"))]
            ])
        else:
            # –ó–≤–∏—á–∞–π–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –æ—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
            keyboard.extend([
                [InlineKeyboardButton("üîç –ü–æ—à—É–∫", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_search"))],
                [InlineKeyboardButton("üìÅ –ì—Ä—É–ø–∞", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_group"))],
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_list"))],
                [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_help"))]
            ])
    else:
        # –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - —Ç—ñ–ª—å–∫–∏ –∑–∞–ø–∏—Ç –¥–æ—Å—Ç—É–ø—É
        keyboard.append([InlineKeyboardButton("üîê –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥–æ—Å—Ç—É–ø", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_request_access"))])
    
    return InlineKeyboardMarkup(keyboard)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–æ–≤—ñ–¥–∫–∏"""
    user_id = update.effective_user.id
    
    if not auth_manager.is_user_allowed(user_id):
        logger.log_unauthorized_access_attempt(user_id, "/help")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç–∞.")
        return
    
    help_text = """
ü§ñ **KeePass Telegram Bot - –î–æ–≤—ñ–¥–∫–∞**

**–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
‚Ä¢ `/start` - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É —Ç–∞ –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏
‚Ä¢ `/search` - –ø–æ—à—É–∫ –∑–∞–ø–∏—Å—ñ–≤ —É –±–∞–∑—ñ KeePass
‚Ä¢ `/group` - –ø–æ—à—É–∫ –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ –≥—Ä—É–ø–æ—é
‚Ä¢ `/list` - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑ –±–∞–∑–∏
‚Ä¢ `/help` - —Ü—è –¥–æ–≤—ñ–¥–∫–∞

**–î–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
‚Ä¢ `/admin` - –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
‚Ä¢ `/reconnect` - –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö

**–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:**

üîç **–ü–æ—à—É–∫ –∑–∞–ø–∏—Å—ñ–≤:**
1. –ù–∞–¥—ñ—à–ª—ñ—Ç—å `/search`
2. –í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É
3. –û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É

üìÅ **–ü–æ—à—É–∫ –∑–∞ –≥—Ä—É–ø–æ—é:**
1. –ù–∞–¥—ñ—à–ª—ñ—Ç—å `/group`
2. –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `Email`)
3. –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –∑–∞–ø–∏—Å–∏ –≤ —Ü—ñ–π –≥—Ä—É–ø—ñ

üìã **–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤:**
1. –ù–∞–¥—ñ—à–ª—ñ—Ç—å `/list`
2. –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é

**–ü—Ä–∏–º—ñ—Ç–∫–∏:**
‚Ä¢ –ü–æ—à—É–∫ –Ω–µ—á—É—Ç–ª–∏–≤–∏–π –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É
‚Ä¢ –í—Å—ñ –¥—ñ—ó –ª–æ–≥—É—é—Ç—å—Å—è –¥–ª—è –±–µ–∑–ø–µ–∫–∏
‚Ä¢ –î–ª—è –¥–æ—Å—Ç—É–ø—É –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø—ñ–Ω-–∫–æ–¥ (–∑–∞–ø–∏—Ç—É–π—Ç–µ —É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    """
    
    await update.message.reply_text(help_text, parse_mode='Markdown')


async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, data: str) -> None:
    """–û–±—Ä–æ–±–∫–∞ callback –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –í–∏—Ç—è–≥—É—î–º–æ –∫–æ–º–∞–Ω–¥—É –∑ callback –¥–∞–Ω–∏—Ö
    command = data.split("_", 1)[1] if "_" in data else data
    
    if command == "search":
        if not auth_manager.is_user_allowed(user_id):
            logger.log_unauthorized_access_attempt(user_id, "menu callback search")
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç–∞.")
            return
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –ª–æ–≥—ñ–∫—É –ø–æ—à—É–∫—É –±–µ–∑ –≤–∏–∫–ª–∏–∫—É –∫–æ–º–∞–Ω–¥–∏
        keepass = get_keepass_handler()
        
        if not keepass or not keepass.is_connected():
            await query.edit_message_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö KeePass –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
        back_keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_menu"))
        ]])
        
        await query.edit_message_text(
            "üîç **–ü–æ—à—É–∫ —É –±–∞–∑—ñ KeePass**\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É:\n"
            "‚Ä¢ –ù–∞–∑–≤–∞ –∑–∞–ø–∏—Å—É\n"
            "‚Ä¢ –õ–æ–≥—ñ–Ω\n"
            "‚Ä¢ URL\n"
            "‚Ä¢ –ë—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç –∑ –∑–∞–ø–∏—Å—É\n\n"
            "–ü–æ—à—É–∫ –Ω–µ—á—É—Ç–ª–∏–≤–∏–π –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É.",
            reply_markup=back_keyboard
        )
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        context.user_data['waiting_for_search'] = True
        
    elif command == "group":
        if not auth_manager.is_user_allowed(user_id):
            logger.log_unauthorized_access_attempt(user_id, "menu callback group")
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç–∞.")
            return
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –≥—Ä—É–ø–∏
        context.user_data['waiting_for_group'] = True
        context.user_data['waiting_for_search'] = False
        context.user_data['waiting_for_pin'] = False
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
        back_keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_menu"))
        ]])
        
        await query.edit_message_text(
            "üîç **–ü–æ—à—É–∫ –∑–∞ –≥—Ä—É–ø–æ—é**\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏ –¥–ª—è –ø–æ—à—É–∫—É –∑–∞–ø–∏—Å—ñ–≤.\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `Email`, `AD HTZ`, `DZTM`",
            parse_mode='Markdown',
            reply_markup=back_keyboard
        )
        
    elif command == "list":
        if not auth_manager.is_user_allowed(user_id):
            logger.log_unauthorized_access_attempt(user_id, "menu callback list")
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
            back_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_menu"))
            ]])
            
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç–∞.", reply_markup=back_keyboard)
            return
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –ª–æ–≥—ñ–∫—É —Å–ø–∏—Å–∫—É –±–µ–∑ –≤–∏–∫–ª–∏–∫—É –∫–æ–º–∞–Ω–¥–∏
        keepass = get_keepass_handler()
        
        if not keepass or not keepass.is_connected():
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
            back_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_menu"))
            ]])
            
            await query.edit_message_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö KeePass –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=back_keyboard)
            return
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏
            all_entries = keepass.get_all_entries()
            
            if not all_entries:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
                back_keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_menu"))
                ]])
                
                await query.edit_message_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è.", reply_markup=back_keyboard)
                return
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            search_results[user_id] = all_entries
            current_page[user_id] = 0
            
            if len(all_entries) <= 10:
                # –Ø–∫—â–æ –∑–∞–ø–∏—Å—ñ–≤ –º–∞–ª–æ, –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ
                keyboard = pagination_manager.create_search_results_keyboard(all_entries, 0, user_id)
                message_text = f"üìã **–í—Å—ñ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—ñ**\n\n–ó–Ω–∞–π–¥–µ–Ω–æ: {len(all_entries)} –∑–∞–ø–∏—Å—ñ–≤"
                await query.edit_message_text(message_text, reply_markup=keyboard, parse_mode='Markdown')
            else:
                # –Ø–∫—â–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Å—ñ–≤, –ø–æ–∫–∞–∑—É—î–º–æ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
                keyboard = pagination_manager.create_search_results_keyboard(all_entries, 0, user_id)
                page_info = pagination_manager.get_page_info(all_entries, 0)
                message_text = f"üìã **–í—Å—ñ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—ñ**\n\n{page_info}"
                await query.edit_message_text(message_text, reply_markup=keyboard, parse_mode='Markdown')
        
        except Exception as e:
            logger.log_error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å—ñ–≤: {e}", user_id)
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
            back_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_menu"))
            ]])
            
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å—ñ–≤.", reply_markup=back_keyboard)
        
    elif command == "admin":
        if user_id != ADMIN_USER_ID:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
            back_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_menu"))
            ]])
            
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=back_keyboard)
            return
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –ª–æ–≥—ñ–∫—É –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ –±–µ–∑ –≤–∏–∫–ª–∏–∫—É –∫–æ–º–∞–Ω–¥–∏
        users = auth_manager.get_allowed_users()
        
        if not users:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
            back_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_menu"))
            ]])
            
            await query.edit_message_text("üìã **–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è.", reply_markup=back_keyboard)
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
        keyboard = auth_manager.create_users_management_keyboard(users, 0, 10, ADMIN_USER_ID)
        
        message_text = f"üìã **–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ –¥–æ—Å—Ç—É–ø–æ–º: {len(users)}\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:"
        
        await query.edit_message_text(message_text, reply_markup=keyboard, parse_mode='Markdown')
        
    elif command == "reconnect":
        if user_id != ADMIN_USER_ID:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
            back_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_menu"))
            ]])
            
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=back_keyboard)
            return
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –ª–æ–≥—ñ–∫—É –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±–µ–∑ –≤–∏–∫–ª–∏–∫—É –∫–æ–º–∞–Ω–¥–∏
        keepass = get_keepass_handler()
        if not keepass:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
            back_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_menu"))
            ]])
            
            await query.edit_message_text("‚ùå KeePass –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π.", reply_markup=back_keyboard)
            return
        
        try:
            if keepass.force_reconnect():
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
                back_keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_menu"))
                ]])
                
                await query.edit_message_text("‚úÖ –ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!", reply_markup=back_keyboard)
                logger.log_info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –≤–∏–∫–æ–Ω–∞–≤ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
            else:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
                back_keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_menu"))
                ]])
                
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.", reply_markup=back_keyboard)
        except Exception as e:
            logger.log_error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}", user_id)
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
            back_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_menu"))
            ]])
            
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.", reply_markup=back_keyboard)
        
    elif command == "help":
        if not auth_manager.is_user_allowed(user_id):
            logger.log_unauthorized_access_attempt(user_id, "menu callback help")
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
            back_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_menu"))
            ]])
            
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç–∞.", reply_markup=back_keyboard)
            return
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ–≤—ñ–¥–∫—É
        help_text = """
ü§ñ **KeePass Telegram Bot - –î–æ–≤—ñ–¥–∫–∞**

**–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
‚Ä¢ `/start` - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É —Ç–∞ –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏
‚Ä¢ `/search` - –ø–æ—à—É–∫ –∑–∞–ø–∏—Å—ñ–≤ —É –±–∞–∑—ñ KeePass
‚Ä¢ `/group` - –ø–æ—à—É–∫ –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ –≥—Ä—É–ø–æ—é
‚Ä¢ `/list` - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑ –±–∞–∑–∏
‚Ä¢ `/help` - —Ü—è –¥–æ–≤—ñ–¥–∫–∞

**–î–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
‚Ä¢ `/admin` - –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
‚Ä¢ `/reconnect` - –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö

**–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:**

üîç **–ü–æ—à—É–∫ –∑–∞–ø–∏—Å—ñ–≤:**
1. –ù–∞–¥—ñ—à–ª—ñ—Ç—å `/search`
2. –í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É
3. –û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É

üìÅ **–ü–æ—à—É–∫ –∑–∞ –≥—Ä—É–ø–æ—é:**
1. –ù–∞–¥—ñ—à–ª—ñ—Ç—å `/group`
2. –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `Email`)
3. –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –∑–∞–ø–∏—Å–∏ –≤ —Ü—ñ–π –≥—Ä—É–ø—ñ

üìã **–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤:**
1. –ù–∞–¥—ñ—à–ª—ñ—Ç—å `/list`
2. –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é

**–ü—Ä–∏–º—ñ—Ç–∫–∏:**
‚Ä¢ –ü–æ—à—É–∫ –Ω–µ—á—É—Ç–ª–∏–≤–∏–π –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É
‚Ä¢ –í—Å—ñ –¥—ñ—ó –ª–æ–≥—É—é—Ç—å—Å—è –¥–ª—è –±–µ–∑–ø–µ–∫–∏
‚Ä¢ –î–ª—è –¥–æ—Å—Ç—É–ø—É –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø—ñ–Ω-–∫–æ–¥ (–∑–∞–ø–∏—Ç—É–π—Ç–µ —É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
        """
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
        back_keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_menu"))
        ]])
        
        await query.edit_message_text(help_text, parse_mode='Markdown', reply_markup=back_keyboard)
        
    elif command == "request_access":
        # –ó–∞–ø–∏—Ç –¥–æ—Å—Ç—É–ø—É –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
        back_keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_menu"))
        ]])
        
        await query.edit_message_text(
            "üîê **–ó–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞**\n\n"
            "–î–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Å–ø–∞–º—É –≤–≤–µ–¥—ñ—Ç—å –ø—ñ–Ω-–∫–æ–¥:\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–Ω-–∫–æ–¥–æ–º –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É.",
            reply_markup=back_keyboard
        )
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–Ω-–∫–æ–¥—É
        context.user_data['waiting_for_pin'] = True
        context.user_data['waiting_for_email_code'] = False
        
    elif command == "menu":
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        keyboard = create_menu_keyboard(user_id)
        
        if auth_manager.is_user_allowed(user_id):
            # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            if user_id == ADMIN_USER_ID:
                # –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
                message_text = "üëë –í–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
            else:
                # –ó–≤–∏—á–∞–π–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
                message_text = "‚úÖ –í–∏ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞"
        else:
            # –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            message_text = "üîê –î–ª—è –¥–æ—Å—Ç—É–ø—É –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è"
        
        await query.edit_message_text(message_text, reply_markup=keyboard, parse_mode='Markdown')
        
    else:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
        back_keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=csrf_manager.add_csrf_to_callback_data(user_id, "cmd_menu"))
        ]])
        
        await query.edit_message_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.", reply_markup=back_keyboard)


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—ñ–≤"""
    query = update.callback_query
    user_id = update.effective_user.id
    data = query.data
    
    await query.answer()
    
    # CSRF –∑–∞—Ö–∏—Å—Ç –¥–ª—è callback –∑–∞–ø–∏—Ç—ñ–≤
    if "|csrf:" in data:
        # –í–∏—Ç—è–≥—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é CSRF
        original_data = csrf_manager.extract_callback_data(user_id, data)
        if not original_data:
            logger.log_csrf_attack(user_id, data)
            await query.edit_message_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω –±–µ–∑–ø–µ–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return
        data = original_data
    else:
        # –î–ª—è —Å—Ç–∞—Ä–∏—Ö callback –±–µ–∑ CSRF —Ç–æ–∫–µ–Ω—ñ–≤
        logger.log_csrf_attack(user_id, data)
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –±–µ–∑–ø–µ–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    
    # –û–±—Ä–æ–±–∫–∞ callback –¥–ª—è –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if data.startswith("cmd_"):
        await handle_menu_callback(update, context, data)
        return
    
    # –û–±—Ä–æ–±–∫–∞ callback –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Å—Ö–≤–∞–ª–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
    if data.startswith("approve_") or data.startswith("deny_"):
        await auth_manager.handle_admin_callback(update, context)
        return
    
    # –û–±—Ä–æ–±–∫–∞ callback –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–ø–∏—Å—É
    if data.startswith("e_"):
        if not auth_manager.is_user_allowed(user_id):
            logger.log_unauthorized_access_attempt(user_id, "callback –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞–ø–∏—Å—É")
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç–∞.")
            return
        
        uuid = data.split("_", 1)[1]
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è UUID
        uuid_validation = input_validator.validate_uuid(uuid)
        if not uuid_validation["valid"]:
            logger.log_error(f"–ù–µ–≤—ñ—Ä–Ω–∏–π UUID –≤ callback: {uuid} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
            await query.edit_message_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å—É.")
            return
        
        keepass = get_keepass_handler()
        
        if not keepass or not keepass.is_connected():
            await query.edit_message_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö KeePass –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        
        try:
            print(f"üîç –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ø–∏—Å –∑–∞ UUID: {uuid}")
            entry = keepass.get_entry_by_uuid(uuid)
            if entry:
                print(f"‚úÖ –ó–∞–ø–∏—Å –æ—Ç—Ä–∏–º–∞–Ω–æ: {entry.get('title', '–±–µ–∑ –Ω–∞–∑–≤–∏')}")
                formatted_entry = keepass.format_entry_for_display(entry)
                logger.log_password_view(user_id, entry.get("title", "–Ω–µ–≤—ñ–¥–æ–º–∞ –Ω–∞–∑–≤–∞"))
                
                # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                back_keyboard = pagination_manager.create_back_keyboard(user_id)
                await query.edit_message_text(formatted_entry, parse_mode='HTML', reply_markup=back_keyboard)
            else:
                print(f"‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ UUID: {uuid}")
                await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É: {e}")
            logger.log_error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É: {e}", user_id)
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—É.")
        return
    
    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –¥–æ –ø–æ—à—É–∫—É"
    if data == "bs":
        if user_id not in search_results:
            await query.edit_message_text("‚ùå –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É.")
            return
        
        results = search_results[user_id]
        page = current_page.get(user_id, 0)
        
        keyboard = pagination_manager.create_search_results_keyboard(results, page, user_id)
        page_info = pagination_manager.get_page_info(results, page)
        
        await query.edit_message_text(
            f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É**\n\n{page_info}",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        return
    
    # –û–±—Ä–æ–±–∫–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    if data.startswith("p_"):
        if user_id not in search_results:
            await query.edit_message_text("‚ùå –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É.")
            return
        
        try:
            page = int(data.split("_", 1)[1])
            results = search_results[user_id]
            
            keyboard = pagination_manager.create_search_results_keyboard(results, page, user_id)
            page_info = pagination_manager.get_page_info(results, page)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
            current_page[user_id] = page
            
            await query.edit_message_text(
                f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É**\n\n{page_info}",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        except (ValueError, IndexError):
            await query.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏.")
        return
    
    # –û–±—Ä–æ–±–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if data.startswith("rm_"):
        if user_id != ADMIN_USER_ID:
            logger.log_unauthorized_access_attempt(user_id, "–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            target_user_id = int(data.split("_", 1)[1])
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ username –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            username = "–Ω–µ–≤—ñ–¥–æ–º–∏–π"
            for user in auth_manager.get_allowed_users():
                if user["user_id"] == target_user_id:
                    username = user["username"]
                    break
            
            # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if auth_manager.revoke_user_access(target_user_id):
                # –õ–æ–≥—É—î–º–æ –∞–¥–º—ñ–Ω –¥—ñ—é
                logger.log_admin_remove_user(user_id, target_user_id, username)
                await query.edit_message_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{username} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –¥–æ—Å—Ç—É–ø—É.")
                
                # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                try:
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text="‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –±—É–ª–æ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                    )
                except Exception as e:
                    logger.log_error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}")
            else:
                await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        except (ValueError, IndexError):
            await query.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    
    # –û–±—Ä–æ–±–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
    if data.startswith("up_"):
        if user_id != ADMIN_USER_ID:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            page = int(data.split("_", 1)[1])
            users = auth_manager.get_allowed_users()
            
            keyboard = auth_manager.create_users_management_keyboard(users, page, 10, ADMIN_USER_ID)
            message_text = f"üìã **–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ –¥–æ—Å—Ç—É–ø–æ–º: {len(users)}\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:"
            
            await query.edit_message_text(message_text, reply_markup=keyboard, parse_mode='Markdown')
        except (ValueError, IndexError):
            await query.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏.")
        return
    
    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"
    if data == "back_to_menu":
        if user_id != ADMIN_USER_ID:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        await query.edit_message_text(
            "üìã **–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/admin - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏\n"
            "/search - –ø–æ—à—É–∫ —É –±–∞–∑—ñ KeePass\n"
            "/group - –ø–æ—à—É–∫ –∑–∞ –≥—Ä—É–ø–æ—é\n"
            "/list - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏"
        )
        return


def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ config.env —Ñ–∞–π–ª—ñ")
        return
    
    if not ADMIN_USER_ID:
        print("‚ùå ADMIN_USER_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ config.env —Ñ–∞–π–ª—ñ")
        return
    
    if not KEEPASS_PASSWORD:
        print("‚ùå KEEPASS_PASSWORD –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ config.env —Ñ–∞–π–ª—ñ")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ email –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    if not all([ADMIN_EMAIL, SMTP_SERVER, SMTP_USERNAME, SMTP_PASSWORD]):
        print("‚ö†Ô∏è Email 2FA –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ–ø–æ–≤–Ω–∞. 2FA –±—É–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
        print("   –ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ: ADMIN_EMAIL, SMTP_SERVER, SMTP_USERNAME, SMTP_PASSWORD")
    else:
        print(f"‚úÖ Email 2FA –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞. Admin email: {ADMIN_EMAIL}")
    
    print(f"‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞. Admin ID: {ADMIN_USER_ID}")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ rate limiter
    global rate_limiter
    rate_limiter = RateLimiter(
        max_pin_attempts=MAX_PIN_ATTEMPTS,
        max_twofa_attempts=MAX_2FA_ATTEMPTS,
        max_requests_per_minute=MAX_REQUESTS_PER_MINUTE,
        pin_lockout_duration=PIN_LOCKOUT_DURATION,
        twofa_lockout_duration=TWOFA_LOCKOUT_DURATION
    )
    print("‚úÖ Rate limiter —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    
    if not os.path.exists(KEEPASS_DB_PATH):
        print(f"‚ùå –§–∞–π–ª –±–∞–∑–∏ –¥–∞–Ω–∏—Ö {KEEPASS_DB_PATH} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ KeePass –æ–±—Ä–æ–±–Ω–∏–∫
    try:
        keepass_handler = init_keepass_handler(KEEPASS_DB_PATH, KEEPASS_PASSWORD, KEEPASS_KEY_FILE)
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        keepass_handler.reconnect_interval = KEEPASS_RECONNECT_INTERVAL
        print(f"‚úÖ KeePass –æ–±—Ä–æ–±–Ω–∏–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (—ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {KEEPASS_RECONNECT_INTERVAL} —Å–µ–∫)")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó KeePass: {e}")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    print("üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Telegram –¥–æ–¥–∞—Ç–∫—É...")
    try:
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        print("‚úÖ Telegram –¥–æ–¥–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É: {e}")
        return
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    print("üîß –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥...")
    try:
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("menu", menu_command))
        application.add_handler(CommandHandler("search", search_command))
        application.add_handler(CommandHandler("group", group_command))
        application.add_handler(CommandHandler("list", list_command))
        application.add_handler(CommandHandler("admin", admin_command))
        application.add_handler(CommandHandler("reconnect", reconnect_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
        application.add_handler(CallbackQueryHandler(handle_callback_query))
        print("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–¥–∞–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print("üí° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏")
    try:
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=["message", "callback_query"]
        )
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        return


if __name__ == "__main__":
    main()
